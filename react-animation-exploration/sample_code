import svgPaths from "./svg-vbmtagextk";
import { motion } from "motion/react";
import { defineProperties } from "figma:react";
import { useEffect, useState } from "react";

export default function Group114({
  duration = 0.6,
  confettiCount = 60,
}: {
  duration?: number;
  confettiCount?: number;
}) {
  const [confetti, setConfetti] = useState<Array<{
    id: number;
    x: number;
    y: number;
    size: number;
    color: string;
    rotation: number;
  }>>([]);

  // regenerate confetti metadata when count changes
  useEffect(() => {
    const pieces = [] as typeof confetti;
    for (let i = 0; i < confettiCount; i++) {
      const angle = Math.random() * Math.PI * 2;
      const radius = 10 + Math.random() * 20; // start near center
      pieces.push({
        id: i,
        x: 50 + Math.cos(angle) * radius,
        y: 50 + Math.sin(angle) * radius,
        size: 4 + Math.random() * 6,
        color: ["#FFD700", "#FF6B6B", "#4ECDC4", "#8CDF6F"][Math.floor(Math.random() * 4)],
        rotation: Math.random() * 360,
      });
    }
    setConfetti(pieces);
  }, [confettiCount]);

  return (
    <div className="relative size-full flex items-center justify-center overflow-hidden">
      {/* Confetti burst */}
      {confetti.map((p) => (
        <motion.div
          key={p.id}
          style={{
            position: "absolute",
            width: p.size,
            height: p.size,
            backgroundColor: p.color,
            borderRadius: Math.random() > 0.5 ? "50%" : "2px",
            left: ${p.x}%,
            top: ${p.y}%,
            transformOrigin: "center",
            zIndex: 2,
          }}
          initial={{ scale: 0, opacity: 0 }}
          animate={{
            scale: [0, 1, 1],
            opacity: [0, 1, 0],
            x: [0, (Math.random() - 0.5) * 120],
            y: [0, (Math.random() - 0.5) * 120],
            rotate: [p.rotation, p.rotation + (Math.random() > 0.5 ? 720 : -720)],
          }}
          transition={{
            // Confetti timing synced with circle animation loop
            duration: duration, // same base duration as circle spring
            times: [0, 0.15, 1], // quick pop then fade
            ease: "easeOut",
            repeat: Infinity,
            repeatDelay: 0.2, // identical to circle repeatDelay
          }}
        />
      ))}

      {/* Main checkmark SVG */}
      <motion.svg
        className="block w-2/3 h-2/3"
        fill="none"
        preserveAspectRatio="none"
        viewBox="0 0 99 99"
        animate={{ scale: [0, 1], rotate: [-90, 0], opacity: [0, 1] }}
        transition={{ type: "spring", duration, bounce: 0.4, repeat: Infinity, repeatDelay: 0.2 }}
      >
        <g clipPath="url(#clip0_4_96)" id="Group 114">
          <motion.path
            d={svgPaths.p2184a900}
            fill="var(--fill-0, #8CDF6F)"
            id="Vector"
          />
          
          {/* Static filled tick */}
          <motion.path
            d={svgPaths.p30929780}
            fill="#000000"
            id="Vector_3_static"
          />
        </g>
        <defs>
          <clipPath id="clip0_4_96">
            <rect fill="white" height="99" width="99" />
          </clipPath>
        </defs>
      </motion.svg>

      
    </div>
  );
}

// Expose props to Figma users
defineProperties(Group114, {
  duration: {
    label: "Animation Duration (s)",
    type: "number",
    defaultValue: 0.6,
    control: "slider",
    min: 0.2,
    max: 2,
    step: 0.1,
  },
  confettiCount: {
    label: "Confetti Count",
    type: "number",
    defaultValue: 60,
    control: "slider",
    min: 10,
    max: 200,
    step: 5,
  },
});